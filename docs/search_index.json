[["index.html", "Rcpp과 RcppEigen 튜토리얼 들어가며", " Rcpp과 RcppEigen 튜토리얼 김현성 2021-08-02 들어가며 R은 통계를 전공하는 사람들이 가장 많이 사용하는 계산 언어 중 하나이다. R을 사용함에 있어 가장 답답한 부분 중 하나는 반복문(for문, while문)이 매우 매우 느리다는 것이다. 이러한 문제를 해결하는 방법 중 하나는 컴파일 언어인 C/C++ 또는 Fortran을 이용하는 것이지만, 이를 단기간에 배우는 것은 쉽지 않다. R에는 컴파일 언어인 C/C++을 사용하기 편리하도록 만들어진 Rcpp이라는 패키지가 있다. 또한 C++에서 선형대수 라이브러리인 Eigen, Armadillo 또한 사용할 수 있도록 각각 RcppEigen, RcppArmadillo를 제공하고 있다. 여기서는 Rcpp과 선형대수 연산을 위한 RcppEigen을 사용하는 방법에 대해 정리해본다. 필자도 C++을 전문적으로 배운 경험은 없으며, R 프로그래밍을 하며 연산속도 향상을 위해 부분적으로 C++을 사용하는 방법 위주로 정리해보려 한다. "],["install.html", "Chapter 1 설치하기 1.1 C/C++ 컴파일러 설치 1.2 패키지 설치", " Chapter 1 설치하기 1.1 C/C++ 컴파일러 설치 1.1.1 Windows Windows에서는 C/C++ 컴파일을 위해 Rtools의 설치가 필요하다. https://cran.r-project.org/bin/windows/Rtools/에서 본인의 R 버전에 맞는 것을 설치해주면 된다. 1.1.2 MacOS MacOS에서는 xcode의 설치가 필요하다. 프로그램이 다소 무거운 편이나, 앱스토어에서 간단히 설치할 수 있다. 1.1.3 Linux 1.2 패키지 설치 마지막으로 이제 R에서 아래의 패키지를 설치해주면 준비는 끝난다. # Rcpp 설치 install.packages(&quot;Rcpp&quot;) # RcppEigen 설치 install.packages(&quot;RcppEigen&quot;) "],["cpp-basic.html", "Chapter 2 C++ 기초 문법 2.1 변수선언 2.2 if 문 2.3 for 문 2.4 while 문", " Chapter 2 C++ 기초 문법 2.1 변수선언 2.1.1 R에서 변수선언 a &lt;- 1 # 정수형 b &lt;- 1.5 # 실수형 c &lt;- TRUE # 논리형 d &lt;- &quot;Rcpp&quot; # 문자형 2.1.2 C++에서 변수선언 int a = 1; // 정수형 double b = 1.5; // 실수형 bool c = true; // 논리형 char d = &quot;Rcpp&quot;; // 문자형 C++에서는 항상 코드 줄의 마지막에 ;(세미콜론)을 적어주어야 한다. 2.1.3 미리 선언 후 나중에 값 저장 int a; a = 100; R에서는 변수의 자료형을 지정해주지 않더라도 자동으로 자료형을 변환해주는 반면, C/C++에서는 자료형을 확실히 정해주어야 한다.1 2.2 if 문 2.2.1 R에서의 if 문 a &lt;- 10 if (a &lt; 5) { print(&quot;5보다 작다&quot;) } else if (a &lt; 8) { print(&quot;8보다 작다&quot;) } else { print(&quot;8보다 크다&quot;) } 2.2.2 C++에서의 if 문 int a = 10; if (a &lt; 5) { std::cout &lt;&lt; &quot;5보다 작다&quot; &lt;&lt; &quot;\\n&quot;; } else if (a &lt; 8) { std::cout &lt;&lt; &quot;8보다 작다&quot; &lt;&lt; &quot;\\n&quot;; } else { std::cout &lt;&lt; &quot;8보다 크다&quot; &lt;&lt; &quot;\\n&quot;; } C++에서 print를 하기 위해서는 C++ 표준 템플릿 라이브러리(STL : Standard Template Library) 내의 std::cout을 이용해야 한다. (Rcpp 내의 Rcpp::Rcout을 이용해도 된다.) 여기서 라이브러리::함수는 라이브러리 내의 함수에 접근한다는 의미로 R에서도 동일하게 사용되는 방법이다. 2.3 for 문 2.3.1 R에서의 for 문 for (i in 1:10) { print(i) } 2.3.2 C++에서의 for 문 for (int i = 0; i &lt; 10; i++) { std::cout &lt;&lt; i &lt;&lt; &quot;\\n&quot;; } 2.4 while 문 2.4.1 R에서의 while 문 2.4.2 C++에서의 while 문 위의 4가지 뿐 아니라 실수의 자릿수 등을 더 디테일하게 정할 수 있는 자료형들이 존재하며 이는 많은 블로그들에서 확인할 수 있다.↩︎ "],["rcpp-basic.html", "Chapter 3 Rcpp 자료형 3.1 Vector 3.2 Matrix", " Chapter 3 Rcpp 자료형 3.1 Vector 3.2 Matrix "],["eigen-basic.html", "Chapter 4 Eigen 자료형 4.1 Vector 4.2 Matrix", " Chapter 4 Eigen 자료형 4.1 Vector 4.2 Matrix "],["references.html", "References", " References "]]
