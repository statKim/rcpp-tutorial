[["index.html", "Rcpp과 RcppEigen 튜토리얼 들어가며", " Rcpp과 RcppEigen 튜토리얼 김현성 2021-08-08 들어가며 R은 통계를 전공하는 사람들이 가장 많이 사용하는 계산 언어 중 하나이다. R을 사용함에 있어 가장 답답한 부분 중 하나는 반복문(for문, while문)이 매우 매우 느리다는 것이다. 이러한 문제를 해결하는 방법 중 하나는 컴파일 언어인 C/C++ 또는 Fortran을 이용하는 것이지만, 이를 단기간에 배우는 것은 쉽지 않다. R에는 컴파일 언어인 C/C++을 사용하기 편리하도록 만들어진 Rcpp이라는 패키지가 있다. (Eddelbuettel et al. (2021)) 또한 C++에서 선형대수 라이브러리인 Eigen, Armadillo 또한 사용할 수 있도록 각각 RcppEigen, RcppArmadillo를 제공하고 있다. 여기서는 Rcpp과 선형대수 연산을 위한 RcppEigen을 사용하는 방법에 대해 정리해본다. 필자도 C++을 전문적으로 배운 경험은 없으며, R 프로그래밍을 하며 연산속도 향상을 위해 부분적으로 C++을 사용하는 방법 위주로 정리해보려 한다. References "],["install.html", "Chapter 1 설치하기 1.1 C/C++ 컴파일러 설치 1.2 패키지 설치", " Chapter 1 설치하기 1.1 C/C++ 컴파일러 설치 1.1.1 Windows Windows에서는 C/C++ 컴파일을 위해 Rtools의 설치가 필요하다. https://cran.r-project.org/bin/windows/Rtools/에서 본인의 R 버전에 맞는 것을 설치해주면 된다. 1.1.2 MacOS MacOS에서는 xcode의 설치가 필요하다. 프로그램이 다소 무거운 편이나, 앱스토어에서 간단히 설치할 수 있다. 1.1.3 Linux 1.2 패키지 설치 마지막으로 이제 R에서 아래의 패키지를 설치해주면 준비는 끝난다. # Rcpp 설치 install.packages(&quot;Rcpp&quot;) # RcppEigen 설치 install.packages(&quot;RcppEigen&quot;) "],["cpp-basic.html", "Chapter 2 C++ 기초 문법 2.1 라이브러리 불러오기 2.2 변수선언 2.3 if 문 2.4 for 문 2.5 while 문 2.6 함수", " Chapter 2 C++ 기초 문법 2.1 라이브러리 불러오기 #include &lt;라이브러리 이름&gt;을 통해 C++ 라이브러리를 불러올 수 있다. R에서 library(패키지명)을 사용하는 것과 비슷하다. #include &lt;RcppEigen.h&gt; #include &lt;Rcpp.h&gt; 2.2 변수선언 2.2.1 R에서 변수선언 a &lt;- 1 # 정수형 b &lt;- 1.5 # 실수형 c &lt;- TRUE # 논리형 d &lt;- &quot;Rcpp&quot; # 문자형 2.2.2 C++에서 변수선언 int a = 1; // 정수형 double b = 1.5; // 실수형 bool c = true; // 논리형 char d = &quot;Rcpp&quot;; // 문자형 C++에서는 항상 코드 줄의 마지막에 ;(세미콜론)을 적어주어야 한다. 2.2.3 미리 선언 후 나중에 값 저장 int a; a = 100; R에서는 변수의 자료형을 지정해주지 않더라도 자동으로 자료형을 변환해주는 반면, C/C++에서는 자료형을 확실히 정해주어야 한다.1 2.3 if 문 2.3.1 R에서의 if 문 a &lt;- 10 if (a &lt; 5) { print(&quot;5보다 작다&quot;) } else if (a &lt; 8) { print(&quot;8보다 작다&quot;) } else { print(&quot;8보다 크다&quot;) } 2.3.2 C++에서의 if 문 int a = 10; if (a &lt; 5) { std::cout &lt;&lt; &quot;5보다 작다&quot; &lt;&lt; &quot;\\n&quot;; } else if (a &lt; 8) { std::cout &lt;&lt; &quot;8보다 작다&quot; &lt;&lt; &quot;\\n&quot;; } else { std::cout &lt;&lt; &quot;8보다 크다&quot; &lt;&lt; &quot;\\n&quot;; } C++에서 print를 하기 위해서는 C++ 표준 템플릿 라이브러리(STL : Standard Template Library) 내의 std::cout을 이용해야 한다. (Rcpp 내의 Rcpp::Rcout을 이용해도 된다.) 여기서 라이브러리::함수는 라이브러리 내의 함수에 접근한다는 의미로 R에서도 동일하게 사용되는 방법이다. R에서와 마찬가지로 라이브러리명을 제외하고 함수명으로만 사용하는 방법은 Namespace를 활용하는 방법이며 이는 Rcpp 파일의 구조 에서 설명하겠다. 2.4 for 문 2.4.1 R에서의 for 문 for (i in 1:10) { print(i) } 2.4.2 C++에서의 for 문 for (int i = 0; i &lt; 10; i++) { std::cout &lt;&lt; i &lt;&lt; &quot;\\n&quot;; } 2.5 while 문 2.5.1 R에서의 while 문 n &lt;- 0 while (n &lt; 5) { print(n) n &lt;- n + 1 } 2.5.2 C++에서의 while 문 int n = 0; while (n &lt; 5) { Rcpp::Rcout &lt;&lt; n &lt;&lt; &quot;\\n&quot;; n = n + 1; } 2.6 함수 2.6.1 R에서의 함수 정의 # 두 실수의 합을 구하는 함수 add &lt;- function(a, b) { val &lt;- a + b return(val) } 2.6.2 C++에서의 함수 정의 // 두 실수의 합을 구하는 함수 double add(double a, double b) { double val = a + b; return val; } C++에서 함수를 정의할 때 유의해야할 점은 input의 자료형과 output의 자료형을 반드시 명시해주어야 한다는 것이다. 아마 R 사용자에게 가장 익숙치 않은 부분일 것이고, 보통 여기서 에러가 매우 많이 발생한다. 이 부분을 항상 주의하도록 하자! 위의 4가지 뿐 아니라 실수의 자릿수 등을 더 디테일하게 정할 수 있는 자료형들이 존재하며 이는 많은 블로그들에서 확인할 수 있다. "],["rcpp-structure.html", "Chapter 3 Rcpp 구조 3.1 Rcpp 파일의 구조 3.2 구조 뜯어보기", " Chapter 3 Rcpp 구조 3.1 Rcpp 파일의 구조 Rstudio에서는 File -&gt; New File -&gt; C++ File을 선택하여 C++ 파일을 만들 수 있다. 확장자는 파일명.cpp의 형태이며 기본으로 생성되는 파일은 다음과 같다. #include &lt;Rcpp.h&gt; using namespace Rcpp; // This is a simple example of exporting a C++ function to R. You can // source this function into an R session using the Rcpp::sourceCpp // function (or via the Source button on the editor toolbar). Learn // more about Rcpp at: // // http://www.rcpp.org/ // http://adv-r.had.co.nz/Rcpp.html // http://gallery.rcpp.org/ // // [[Rcpp::export]] NumericVector timesTwo(NumericVector x) { return x * 2; } // You can include R code blocks in C++ files processed with sourceCpp // (useful for testing and development). The R code will be automatically // run after the compilation. // /*** R timesTwo(42) */ 3.2 구조 뜯어보기 Rcpp을 사용하기 위한 라이브러리 로드 #include &lt;Rcpp.h&gt; namespace를 지정하여 앞에서 언급했던 라이브러리명::함수명 대신 함수명으로도 사용이 가능 using namespace Rcpp; // : C++에서의 주석 기호 C++ 함수 정의 // [[Rcpp::export]] NumericVector timesTwo(NumericVector x) { return x * 2; } [[Rcpp::export]]는 C++에서 정의한 함수를 R에서 사용할 수 있도록 해주는 구문 C++에서 R을 실행해보는 청크(Chunk) /*** R timesTwo(42) */ 인터프리터 언어인 R과 달리 C++은 컴파일 언어이기 때문에, 파일 전체를 컴파일하며 오류가 있는지 체크한다. 따라서 R처럼 한 줄씩 실행하며 코드에 오류가 있는지 확인하기 어려운데, 이 청크를 이용하여 컴파일과 동시에 함수가 잘 정의되었는지 확인할 수 있다. "],["rcpp-basic.html", "Chapter 4 Rcpp 자료형 4.1 Vector 4.2 Matrix", " Chapter 4 Rcpp 자료형 4.1 Vector 4.2 Matrix "],["eigen-basic.html", "Chapter 5 Eigen 자료형 5.1 Vector 5.2 Matrix", " Chapter 5 Eigen 자료형 5.1 Vector 5.2 Matrix "],["references.html", "References", " References "]]
